# -*- coding: utf-8 -*-
"""incendios_amazonia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w4n-tKgSSUpgkATFO0MiW6Iw_CHLWMu0

# Incêndios na Amazônia

## Contexto

Recentemente com as notícias sobre as queimadas, uma publicação divulgada nas redes sociais dizia que o número de focos de queimadas na Amazônia em 2019 é o menor desde 1998.  

Essa informação é **FALSA**. 

Apesar de utilizar dados do INPE, a comparação entre os anos está errada, pois o número de meses usada para a comparação não é equivalente: para 2019 temos apenas os valores de janeiro à agosto, enquanto para outros anos (exceto 1998) temos os valores de janeiro à dezembro.

Para saber mais veja a notícia no Aos Fatos: [Número de focos de queimadas na Amazônia em 2019 não é o menor desde 1998](https://aosfatos.org/noticias/numero-de-focos-de-queimadas-na-amazonia-em-2019-nao-e-o-menor-desde-1998/). 

## Vamos conferir? 
A tabela com as informações estatíscas de focos de queimadas está nesse link 

http://queimadas.dgi.inpe.br/queimadas/portal-static/estatisticas_estados/

Quando filtramos os dados, um iframe é retornado contendo a tabela de focos filtrada de acordo com a data e o estado/região/bioma escolhido. 

No caso para Amazônia o iframe retornado é http://queimadas.dgi.inpe.br/queimadas/portal-static/bioma/grafico_historico_estado_amazonia.html?_=08281906


### Raspando os Dados

A ferramenta utilizada para essa raspagem de dados será BeautifulSoup.


### Parte 1 
Para acessar esse link através do script é preciso fazer algumas importações:

*  urllib.request: ferramenta que permitirá que consigamos fazer uma requisição e acessar a página web
*  beautifulsoup: ferramenta para extrair e manipular o html
"""

import urllib.request
from bs4 import BeautifulSoup

"""### Parte 2


*   Definir a url 
*   Fazer a requisição
*   Definir um objeto `soup` que recebe todo o conteúdo html da página
"""

url = "http://queimadas.dgi.inpe.br/queimadas/portal-static/bioma/grafico_historico_estado_amazonia.html?_=08281906"

html = urllib.request.urlopen(url)
soup = BeautifulSoup(html.read(), 'html.parser')
print(soup)

"""### Parte 3


*   Encontrar a tag 'table' e extrair a tabela
"""

tabela = soup.find('table')
print(tabela)
dict = {}

"""### Parte 4


*   Encontrar a tag 'tbody' e extrair as linhas da tabela
"""

tbody = tabela.find('tbody')
linhas = tbody.findAll('tr')
print(linhas)

"""### Parte 5


*   Extrair o ano de cada uma das linhas
"""

for linha in linhas:
    ano = linha.find('th').text
    if(ano != 'Máximo*' and ano !='Mínimo*' and ano !='Média*'):
      print("Ano " + ano)

"""### Parte 6


* Extrair o valor das colunas
"""

for linha in linhas:
    ano = linha.find('th').text
    if(ano != 'Máximo*' and ano !='Mínimo*' and ano !='Média*'):

      colunas = linha.findAll('td')

      col_num = 1
      for coluna in colunas: 
        print("Coluna " + str(col_num) + ": " + coluna.text)
        col_num += 1

"""### Parte 7


* Somar o valor total de queimadas por ano de janeiro a agosto (1-8)
"""

for linha in linhas:
    ano = linha.find('th').text
    if(ano != 'Máximo*' and ano !='Mínimo*' and ano !='Média*'):
    
      colunas = linha.findAll('td')

      col_num = 1
      soma = 0

      for coluna in colunas: 
        if(col_num <= 8):
          if(coluna.text != '-'):
            soma += int(coluna.text)
        col_num += 1

      print("Soma do ano " + str(ano) + ": " + str(soma))

"""### Parte 8


* Fazer a média de cada um dos anos de acordo com os meses que possuem valores declarados.
"""

for linha in linhas:
    ano = linha.find('th').text
    if(ano != 'Máximo*' and ano !='Mínimo*' and ano !='Média*'):
    
      colunas = linha.findAll('td')

      col_num = 1
      soma = 0
      meses_validos = 0
      for coluna in colunas: 
        if(col_num <= 8):
          if(coluna.text != '-'):
            soma += int(coluna.text)
            meses_validos +=1

        col_num += 1

      print("Ano " + str(ano) + ": ")
      print("Numero de meses contados: " +  str(meses_validos))
      print("Soma do ano: " + str(soma))
      print("Média do ano: " + str(soma/meses_validos))

"""### Parte 9


*   Criar um dicionário de anos 
*   Adicionar no dicionário os valores de:
  *   Soma equivalente por ano
  *   Media equivalente por ano
  *   Quantidade de meses com valores declarados que foi utilizada nos cálculos
"""

for linha in linhas:
    ano = linha.find('th').text
    if(ano != 'Máximo*' and ano !='Mínimo*' and ano !='Média*'):
      dict[ano] = {}

      colunas = linha.findAll('td')

      col_num = 1
      soma = 0
      meses_validos = 0
      for coluna in colunas: 
        if(col_num <= 8):
          if(coluna.text != '-'):
            soma += int(coluna.text)
            meses_validos +=1

            dict[ano]['soma'] = soma
            dict[ano]['media'] = soma / meses_validos
            dict[ano]['meses_contados'] = meses_validos

        col_num += 1

      print("Ano " + str(ano) + str(dict[ano]))
      print("Soma do ano: " + str(dict[ano]['soma']))
      print("Média do ano: " + str(dict[ano]['media']))

"""### Parte 10


*   Ordenar os anos de acordo com a MÉDIA das queimadas em ordem decrescente (dos anos com maior média para os com menor média) 
*   Ordenar os anos de acordo com a SOMA das queimadas em ordem decrescente (dos anos com maior soma para os com menor soma)
"""

maior_media_de_queimadas = sorted(dict, key=lambda x: dict[x]['media'], reverse=True)
for ano in maior_media_de_queimadas:
  indice = maior_media_de_queimadas.index(ano) + 1
  print(indice, ano)

maior_soma_de_queimadas = sorted(dict, key=lambda x: dict[x]['soma'], reverse=True)
for ano in maior_soma_de_queimadas:
  indice = maior_soma_de_queimadas.index(ano) + 1 
  print(indice, ano)

"""### Parte 11


*  Buscar os valores referentes a 2019
"""

print(maior_media_de_queimadas.index('2019')+1)